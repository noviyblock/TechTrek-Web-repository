openapi: 3.0.4
info:
  title: TechTrek API
  description: "API для пошаговой игры TechTrek (стартап-симуляции)."
  version: 0.0.2

servers:
  - url: http://localhost:8080/api
    description: Локальный сервер разработки
tags:
  - name: auth
    description: Аутентификация пользователя
  - name: Game
    description: Эндпоинты логики игры


paths:
  /auth/status:
    get:
      tags: 
        - auth
      summary: Проверить статус авторизации
      description: |
        Эндпоинт проверяет, авторизован ли пользователь и возвращает данные
        о нём, если сессия валидна.
      responses:
        '200':
          description: Статус авторизованного или неавторизованного пользователя.
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorized:
                    type: boolean
                  user:
                    type: object
                    nullable: true
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
        '401':
          description: Неавторизован (нет валидной сессии)
          
  /auth/register:
    post:
      tags: 
        - auth
      summary: Регистрация нового пользователя
      description: Создание новой учётной записи пользователя и возврат access/refresh токенов
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        '409':
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                type: string
                example: "Username is already in use"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: string
                example: "An unexpected error occurred"


  /auth/login:
    post:
      tags: 
        - auth
      summary: Аутентификация пользователя
      description: Авторизация по логину и паролю. Возвращает access и refresh токены.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        '401':
          description: Неверный логин или пароль
          content:
            application/json:
              schema:
                type: string
                example: "Invalid credentials"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: string
                example: "An unexpected error occurred"

  /game/start:
    post:
      tags:
        - Game
      summary: "Start a new game"
      description: >
        Запускает новую игру по заданному идентификатору миссии и имени компании.
        Возвращает текущее состояние игры для аутентифицированного пользователя.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartGameRequest'
      responses:
        '201':
          description: "Игра успешно запущена"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameStateDTO'
        '400':
          description: "Некорректный запрос (например, отсутствует missionId или companyName)"
        '401':
          description: "Пользователь не аутентифицирован"
        '500':
          description: "Внутренняя ошибка сервера"

  /game/{gameId}/state:
    get:
      tags:
        - Game
      summary: "Get current game state"
      description: >
        Возвращает текущее состояние игры по её идентификатору для аутентифицированного пользователя.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: gameId
          in: path
          description: "Уникальный идентификатор игры"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Текущее состояние игры успешно получено"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameStateDTO'
        '400':
          description: "Некорректный идентификатор игры"
        '401':
          description: "Пользователь не аутентифицирован"
        '404':
          description: "Игра с указанным идентификатором не найдена"
        '500':
          description: "Внутренняя ошибка сервера"

  /game/{gameId}/modifiers:
    get:
      tags:
        - Game
      summary: "Get game modifiers"
      description: >
        Возвращает список всех модификаторов (ModifierResponse) для указанной игры.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: gameId
          in: path
          description: "Уникальный идентификатор игры"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Список модификаторов успешно получен"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModifierResponse'
        '400':
          description: "Некорректный идентификатор игры"
        '401':
          description: "Пользователь не аутентифицирован"
        '404':
          description: "Игра с указанным идентификатором не найдена"
        '500':
          description: "Внутренняя ошибка сервера"

  /game/{gameId}/modifiers():
    post:
      tags:
        - Game
      summary: "Purchase a game modifier"
      description: >
        Приобретает указанный модификатор для игры, списывает его стоимость с бюджета и возвращает обновлённое состояние владения модификаторами.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: gameId
          in: path
          description: "Уникальный идентификатор игры"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        '200':
          description: "Модификатор успешно приобретён"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseResponse'
        '400':
          description: "Некорректный запрос (например, отсутствует modifierId в теле)"
        '401':
          description: "Пользователь не аутентифицирован"
        '404':
          description: "Игра или модификатор с указанными идентификаторами не найдены"
        '500':
          description: "Внутренняя ошибка сервера"

  /game/{gameId}/evaluate-decision:
    post:
      tags:
        - Game
      summary: "Evaluate a decision"
      description: >
        Оценивает принятое игроком решение, возвращает изменения состояния (мотивация, техническая готовность, бюджет и др.)
        и текст ответа игроку.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: gameId
          in: path
          description: "Уникальный идентификатор игры"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecisionRequest'
      responses:
        '200':
          description: "Результаты оценки решения успешно возвращены"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateDecisionResponse'
        '400':
          description: "Некорректный запрос (например, отсутствует поле decision)"
        '401':
          description: "Пользователь не аутентифицирован"
        '404':
          description: "Игра с указанным идентификатором не найдена"
        '500':
          description: "Внутренняя ошибка сервера"



  /api/presentation/analyze:
    post:
      summary: Предварительный анализ текста/данных презентации
      description: |
        Отправляет введённое описание, тезисы, а также любые вспомогательные данные для LLM-сервиса.
        Возвращает подсказки, что можно улучшить в презентации, и оценку полноты.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationAnalysisRequest'
      responses:
        '200':
          description: Анализ презентации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationAnalysisResponse'
        '400':
          description: Ошибка в теле запроса (недостаточно данных)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/presentation/submit:
    post:
      summary: Отправить финальную версию презентации
      description: |
        После того, как пользователь закончил редактирование, он подтверждает готовность. 
        Сервер (Engine) сохраняет финальную версию и передает ее "Судье" (Judge) для комплексной оценки.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinalPresentationRequest'
      responses:
        '200':
          description: Презентация принята к оценке
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Presentation submitted successfully"
                  submissionId:
                    type: string
                    example: "submission-123"
        '400':
          description: Некорректные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Сессия или этап презентации не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/presentation/result:
    get:
      summary: Результат оценки презентации
      description: |
        Возвращает детальный отчет от "Оценщика" (Judge): сильные/слабые стороны, рекомендации,
        бонусы/штрафы. Если это MVP-этап – возможно обновление финансирования, если финал – итоговый score.
      parameters:
        - in: query
          name: sessionId
          schema:
            type: string
          required: true
          description: "ID игровой сессии"
        - in: query
          name: submissionId
          schema:
            type: string
          required: true
          description: "ID отправленной презентации"
      responses:
        '200':
          description: Оценочный лист + финальный результат
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgingResult'
        '404':
          description: Результат еще не готов или не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

                    

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        username:
          type: string
          
    Domain:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    Goal:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        domain:
          type: string
        description:
          type: string

    Resources:
      type: object
      properties:
        budget:
          type: integer
          description: "Начальный бюджет"


    Employee:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        role:
          type: string
        salary:
          type: integer
          
    CrisisEvent:
        type: object
        properties:
          crisisId:
            type: string
            example: "crisis-123"
          type:
            type: string
            description: "Тип кризиса (например, 'SecurityBreach', 'FinancialTrouble' и т.д.)"
            example: "SecurityBreach"
          complexity:
            type: string
            description: "Уровень сложности кризиса"
            example: "High"
          description:
            type: string
            description: "Краткое описание или текст события"
            example: "Утечка данных из системы"
          timeLeft:
            type: integer
            description: "Оставшееся время (секунды/минуты) на решение кризиса"
            example: 300
          status:
            type: string
            description: "Текущее состояние кризиса (active, resolved, failed, etc.)"
            example: "active"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Crisis not found"

    CrisisDecisionRequest:
      type: object
      properties:
        sessionId:
          type: string
          description: "ID игровой сессии"
          example: "session-xyz"
        crisisId:
          type: string
          description: "ID текущего кризиса"
          example: "crisis-123"
        useExpert:
          type: boolean
          description: "Флаг, указывающий, что игрок решил привлечь эксперта"
          example: true
        expertId:
          type: string
          description: "ID эксперта, если требуется конкретный эксперт"
          example: "expert-007"
      required:
        - sessionId
        - crisisId
        - useExpert

    CrisisSolutionRequest:
      type: object
      properties:
        sessionId:
          type: string
          description: "ID игровой сессии"
          example: "session-xyz"
        crisisId:
          type: string
          description: "ID кризиса"
          example: "crisis-123"
        solutionText:
          type: string
          description: "Формулировка решения (может быть результатом распознавания речи, если голос)"
          example: "Срочно обновить все пароли, отключить скомпрометированные узлы..."
      required:
        - sessionId
        - crisisId
        - solutionText

    CrisisSolutionResponse:
      type: object
      properties:
        roll:
          type: integer
          description: "Результат броска 2d6"
          example: 7
        outcome:
          type: string
          description: "Итог разрешения кризиса (critical_fail, partial_success, critical_success)"
          example: "partial_success"
        updatedResources:
          type: object
          description: "Новые параметры ресурсов после разрешения кризиса"
          properties:
            budget:
              type: integer
              example: 85000
            reputation:
              type: integer
              example: 45
        message:
          type: string
          description: "Дополнительный текст о результате"
          example: "Частично удалось устранить последствия, но репутация пострадала"
        updatedCrisis:
          $ref: '#/components/schemas/CrisisEvent'
          
          
    Action:
      type: object
      properties:
        id:
          type: string
          example: "buyAsset"
        name:
          type: string
          example: "Купить актив"
        description:
          type: string
          example: "Позволяет приобрести новый актив для расширения возможностей"
    Asset:
      type: object
      properties:
        assetId:
          type: string
          example: "asset-123"
        name:
          type: string
          example: "Серверная стойка"
        cost:
          type: integer
          example: 10000
        description:
          type: string
          example: "Повышает производительность вашей инфраструктуры"
        effects:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: "productivity"
              value:
                type: integer
                example: 5

    BuyAssetRequest:
      type: object
      properties:
        sessionId:
          type: string
          description: "ID текущей игровой сессии"
          example: "session-xyz"
        assetId:
          type: string
          description: "ID актива, который мы хотим купить"
          example: "asset-123"
      required:
        - sessionId
        - assetId   
    ResourceState:
      type: object
      description: "Текущее состояние ресурсов (бюджет, репутация и т.д.)"
      properties:
        budget:
          type: integer
          example: 50000
        reputation:
          type: integer
          example: 85
    PresentationInfo:
      type: object
      properties:
        stageType:
          type: string
          description: "Тип презентации (MVP, финальная, промежуточная и т.д.)"
          example: "MVP"
        criteria:
          type: array
          description: "Критерии оценки"
          items:
            type: string
          example: ["Инновационность", "Финансовая устойчивость", "Командная компетенция"]
        currentMetrics:
          type: object
          description: "Доп. метрики проекта"
          properties:
            revenue:
              type: integer
              example: 100000
            userBase:
              type: integer
              example: 5000
        recommendations:
          type: string
          description: "Общие рекомендации для улучшения"
          example: "Сфокусируйтесь на готовности MVP к тестированию"


    PresentationAnalysisRequest:
      type: object
      properties:
        sessionId:
          type: string
          description: "ID игровой сессии"
          example: "session-xyz"
        content:
          type: string
          description: "Основной текст презентации или тезисы"
          example: "Наша компания планирует..."
        attachments:
          type: array
          description: "Ссылки на приложения (таблицы, графики)"
          items:
            type: string
            example: "http://example.com/data.pdf"
      required:
        - sessionId
        - content


    PresentationAnalysisResponse:
      type: object
      properties:
        coverageScore:
          type: integer
          description: "Оценка полноты (0-100 или другая шкала)"
          example: 85
        suggestions:
          type: array
          description: "Список рекомендаций по улучшению"
          items:
            type: string
          example: ["Уточните бизнес-модель", "Добавьте маркетинговую стратегию"]
        highlights:
          type: array
          description: "Что уже хорошо отражено в презентации"
          items:
            type: string
          example: ["Команда с сильным опытом", "Чётко определённая проблема"]


    FinalPresentationRequest:
      type: object
      properties:
        sessionId:
          type: string
          example: "session-xyz"
        finalContent:
          type: string
          description: "Финальный текст презентации"
          example: "Мы готовы представить прототип..."
        finalAttachments:
          type: array
          description: "Ссылки на итоговые материалы (прототип, фин. прогнозы)"
          items:
            type: string
            example: "example"
      required:
        - sessionId
        - finalContent


    JudgingResult:
      type: object
      properties:
        scoreSheet:
          type: object
          description: "Детальный список оценок по критериям"
          properties:
            innovation:
              type: integer
              example: 8
            feasibility:
              type: integer
              example: 7
            team:
              type: integer
              example: 9
        strengths:
          type: array
          items:
            type: string
          description: "Сильные стороны презентации / проекта"
          example: ["Высокая команда компетенции", "Чёткая проблематика"]
        recommendations:
          type: array
          items:
            type: string
          description: "Рекомендации по дальнейшему развитию"
          example: ["Оптимизировать расходы", "Усилить маркетинг"]
        bonusOrPenalty:
          type: integer
          description: "Числовой бонус/штраф к финансированию или репутации"
          example: 20000
        finalFunding:
          type: integer
          description: "Новое финансирование (если MVP-этап)"
          example: 120000
        finalScore:
          type: integer
          description: "Итоговый балл (если финальный этап)"
          example: 85
        message:
          type: string
          description: "Сообщение о результате"
          example: "Презентация успешно защищена. Финансирование увеличено."

    StartGameRequest:
      type: object
      properties:
        missionId:
          type: integer
          format: int64
          description: "Идентификатор миссии, по которой запускается игра"
        companyName:
          type: string
          description: "Название компании игрока"
      required:
        - missionId
        - companyName
    GameStateDTO:
      type: object
      properties:
        gameId:
          type: integer
          format: int64
          description: "Уникальный идентификатор игры"
        companyName:
          type: string
          description: "Название компании"
        stage:
          type: integer
          description: "Текущий этап игры"
        turnNumber:
          type: integer
          description: "Номер текущего хода"
        monthsPassed:
          type: integer
          description: "Количество прошедших месяцев"
        missionId:
          type: integer
          format: int64
          description: "Идентификатор миссии"
        money:
          type: integer
          format: int64
          description: "Текущий бюджет компании"
        technicReadiness:
          type: integer
          description: "Техническая готовность"
        productReadiness:
          type: integer
          description: "Готовность продукта"
        motivation:
          type: integer
          description: "Уровень мотивации команды"
        juniors:
          type: integer
          description: "Количество junior-разработчиков"
        middles:
          type: integer
          description: "Количество middle-разработчиков"
        seniors:
          type: integer
          description: "Количество senior-разработчиков"
        superEmployees:
          type: array
          description: "Список имён ключевых сотрудников"
          items:
            type: string
        situationText:
          type: string
          description: "Описание текущей игровой ситуации"
      required:
        - gameId
        - companyName
        - stage
        - turnNumber
        - monthsPassed
        - missionId
        - money
        - technicReadiness
        - productReadiness
        - motivation
        - juniors
        - middles
        - seniors
        - superEmployees
        - numberOfOffices
        - situationText

    ModifierResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "Уникальный идентификатор модификатора"
        name:
          type: string
          description: "Название модификатора"
        type:
          type: string
          description: "Тип модификатора (значения из Enum ModifierType)"
        purchaseCost:
          type: integer
          format: int64
          description: "Стоимость покупки"
        upkeepCost:
          type: integer
          format: int64
          description: "Ежемесячные/периодические затраты на содержание"
        stageAllowed:
          type: integer
          description: "Этап игры, на котором модификатор становится доступен"
        owned:
          type: boolean
          description: "Флаг, указывающий, приобретён ли модификатор"
      required:
        - id
        - name
        - type
        - purchaseCost
        - upkeepCost
        - stageAllowed
        - owned

    PurchaseRequest:
      type: object
      properties:
        modifierId:
          type: integer
          format: int64
          description: "Идентификатор модификатора для покупки"
      required:
        - modifierId

    PurchaseResponse:
      type: object
      properties:
        gameId:
          type: integer
          format: int64
          description: "Идентификатор игры, в которой произведена покупка"
        modifierId:
          type: integer
          format: int64
          description: "Идентификатор приобретённого модификатора"
        remainingMoney:
          type: integer
          format: int64
          description: "Остаток денег после покупки"
        ownedModifiers:
          type: array
          description: "Список имён или идентификаторов всех приобретённых модификаторов"
          items:
            type: string
        quantity:
          type: integer
          description: "Количество единиц данного модификатора, которыми теперь владеет игрок"
      required:
        - gameId
        - modifierId
        - remainingMoney
        - ownedModifiers
        - quantity

    DecisionRequest:
      type: object
      properties:
        decision:
          type: string
          description: "Выбранное игроком решение"
      required:
        - decision

    EvaluateDecisionResponse:
      type: object
      properties:
        motivationDelta:
          type: integer
          description: "Изменение мотивации"
        newMotivation:
          type: integer
          description: "Новый уровень мотивации"
        technicalDelta:
          type: integer
          description: "Изменение технической готовности"
        newTechnicalReadiness:
          type: integer
          description: "Новая техническая готовность"
        productDelta:
          type: integer
          description: "Изменение готовности продукта"
        newProductReadiness:
          type: integer
          description: "Новая готовность продукта"
        moneyDelta:
          type: number
          format: double
          description: "Изменение бюджета"
        newMoney:
          type: number
          format: double
          description: "Новый бюджет"
        textToPlayer:
          type: string
          description: "Текст ответа игроку"
        qualityScore:
          type: number
          format: double
          description: "Оценка качества принятого решения"
        roll:
          $ref: '#/components/schemas/RollResponse'
      required:
        - motivationDelta
        - newMotivation
        - technicalDelta
        - newTechnicalReadiness
        - productDelta
        - newProductReadiness
        - moneyDelta
        - newMoney
        - textToPlayer
        - qualityScore
        - roll

    RollResponse:
      type: object
      properties:
        diceTotal:
          type: integer
          description: "Сумма выпавших на кубиках очков"
        zone:
          type: string
          description: "Зона результата броска"
      required:
        - diceTotal
        - zone


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT